<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Institute of Unknown Purpose</title>
    <link>http://unknownpurpose.github.io/</link>
    <description>Recent content on Institute of Unknown Purpose</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 01 Nov 2017 09:55:31 +0000</lastBuildDate>
    
	<atom:link href="http://unknownpurpose.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Servos in the Cloud</title>
      <link>http://unknownpurpose.github.io/post/servos-in-the-cloud/</link>
      <pubDate>Wed, 01 Nov 2017 09:55:31 +0000</pubDate>
      
      <guid>http://unknownpurpose.github.io/post/servos-in-the-cloud/</guid>
      <description>If you followed along with our introduction to Docker, ROS, and overlay networking you&amp;rsquo;ll have a couple of machines (at least) in a Swarm, and an overlay network called botnet which is all ready to go.
For the next part, we&amp;rsquo;re going to hook up a Beaglebone Black with four Dynamixels attached via a USB2AX controller, then control it remotely. Whilst this is pretty specific requirements-wise, these instructions will also generalise fairly well to other platforms – Raspberry Pi for instance – with only a bit of tinkering.</description>
    </item>
    
    <item>
      <title>Cloud Robotics With ROS and Docker</title>
      <link>http://unknownpurpose.github.io/post/cloud-robotics-with-ros-and-docker/</link>
      <pubDate>Wed, 01 Nov 2017 09:52:01 +0000</pubDate>
      
      <guid>http://unknownpurpose.github.io/post/cloud-robotics-with-ros-and-docker/</guid>
      <description>Here at the institute we&amp;rsquo;re busy building our own take on cloud robotics, about which you can read more [here]. For this we need an approach that scales well to multiple subsystems, with differing OS requirements – from remote data processing on GPU accelerated hardware, to embedded motor control. To this end we&amp;rsquo;ve settled on a combination of the open-source Robot Operating System ROS, and an overlay network (enabled using Docker Swarm) to link each subcomponent into a single &amp;lsquo;distributed robot&amp;rsquo;.</description>
    </item>
    
  </channel>
</rss>